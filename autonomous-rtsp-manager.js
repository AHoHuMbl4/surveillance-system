/**
 * Autonomous RTSP Manager - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ RTSP –ø–æ—Ç–æ–∫–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ç–∏–ø–∞ FFmpeg
 * –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —á–∏—Å—Ç–æ–º Node.js + JavaScript
 */

import { EventEmitter } from 'events';
import http from 'http';
import https from 'https';
import { URL } from 'url';
import fs from 'fs';
import path from 'path';

class AutonomousRTSPManager extends EventEmitter {
    constructor() {
        super();
        this.activeStreams = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ RTSP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.streamProxies = new Map(); // HTTP –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
        this.connectionAttempts = new Map(); // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectTimers = new Map(); // –¢–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.audioStreams = new Map(); // –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
        this.currentAudioStream = null; // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            maxRetries: 5,
            retryInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            connectionTimeout: 15000, // 15 —Å–µ–∫—É–Ω–¥
            bufferSize: 1024 * 1024, // 1MB –±—É—Ñ–µ—Ä
            proxyPort: 8080, // –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏ –ø–æ—Ç–æ–∫–æ–≤
            supportedFormats: ['mjpeg', 'h264', 'mp4'], // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            audioCodecs: ['aac', 'pcm', 'g711'], // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–∏
            chunkSize: 64 * 1024, // –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            maxConnections: 250 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        };
        
        this.nextProxyPort = this.config.proxyPort;
        console.log('üé• Autonomous RTSP Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã - –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ (–Ω–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
     */
    async checkSystemAvailability() {
        return {
            available: true,
            version: '1.0.0-autonomous',
            platform: process.platform,
            nodeVersion: process.version,
            features: {
                rtspProxy: true,
                mjpegSupport: true,
                h264Support: false, // –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                audioSupport: true,
                crossPlatform: true
            }
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ RTSP –ø–æ—Ç–æ–∫–∞
     * @param {Object} camera - –û–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @param {string} quality - 'low' (480p) –∏–ª–∏ 'high' (1080p)
     * @param {boolean} includeAudio - –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
     */
    async startStream(camera, quality = 'low', includeAudio = false) {
        const streamId = `${camera.id}_${quality}`;
        
        try {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.activeStreams.has(streamId)) {
                await this.stopStream(streamId);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            if (this.activeStreams.size >= this.config.maxConnections) {
                throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${this.config.maxConnections}`);
            }

            console.log(`üé¨ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${camera.camera_name} (${quality})`);

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –ø–æ—Ç–æ–∫–∞
            const streamUrl = quality === 'high' ? 
                (camera.rtsp_link_high || camera.rtsp_link) : 
                camera.rtsp_link;

            // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞
            const streamInfo = await this.analyzeStreamType(streamUrl);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ—Ç–æ–∫–∞
            const proxyServer = await this.createStreamProxy(streamId, streamUrl, streamInfo);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Ç–æ–∫–∞
            const streamData = {
                id: streamId,
                camera: camera,
                quality: quality,
                streamUrl: streamUrl,
                streamInfo: streamInfo,
                proxyServer: proxyServer,
                proxyPort: proxyServer.address().port,
                status: 'connecting',
                startTime: Date.now(),
                includeAudio: includeAudio,
                bytesTransferred: 0,
                clientsConnected: 0
            };

            this.activeStreams.set(streamId, streamData);
            this.connectionAttempts.set(streamId, 0);

            // –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (includeAudio) {
                await this.startAudioStream(streamData);
            }

            // –≠–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            setTimeout(() => {
                streamData.status = 'streaming';
                this.emit('streamConnected', { streamId, camera, type: 'video' });
            }, 1000);

            return streamId;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}:`, error.message);
            this.handleStreamError(streamId, camera, error);
            throw error;
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ RTSP –ø–æ—Ç–æ–∫–∞
     */
    async analyzeStreamType(streamUrl) {
        try {
            const url = new URL(streamUrl);
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ URL
            let streamType = 'mjpeg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é MJPEG (–Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
            let hasAudio = false;
            
            // –ê–Ω–∞–ª–∏–∑ URL –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
            if (streamUrl.includes('h264') || streamUrl.includes('264')) {
                streamType = 'h264';
            } else if (streamUrl.includes('mp4')) {
                streamType = 'mp4';
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ
            if (streamUrl.includes('audio') || streamUrl.includes('sound')) {
                hasAudio = true;
            }

            return {
                type: streamType,
                hasAudio: hasAudio,
                protocol: url.protocol,
                host: url.hostname,
                port: url.port || (url.protocol === 'rtsp:' ? 554 : 80),
                path: url.pathname + (url.search || ''),
                isSecure: url.protocol === 'rtsps:'
            };

        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫: ${error.message}`);
            return {
                type: 'mjpeg',
                hasAudio: false,
                protocol: 'rtsp:',
                host: 'localhost',
                port: 554,
                path: '/',
                isSecure: false
            };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTTP –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è RTSP –ø–æ—Ç–æ–∫–∞
     */
    async createStreamProxy(streamId, streamUrl, streamInfo) {
        return new Promise((resolve, reject) => {
            const proxyPort = this.nextProxyPort++;
            
            const server = http.createServer((req, res) => {
                this.handleProxyRequest(req, res, streamId, streamUrl, streamInfo);
            });

            server.listen(proxyPort, 'localhost', () => {
                console.log(`üîó –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${streamId} –Ω–∞ –ø–æ—Ä—Ç—É ${proxyPort}`);
                resolve(server);
            });

            server.on('error', (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ${streamId}:`, error);
                reject(error);
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            server.on('connection', (socket) => {
                const streamData = this.activeStreams.get(streamId);
                if (streamData) {
                    streamData.clientsConnected++;
                    
                    socket.on('close', () => {
                        streamData.clientsConnected--;
                    });
                }
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É
     */
    async handleProxyRequest(req, res, streamId, streamUrl, streamInfo) {
        try {
            const streamData = this.activeStreams.get(streamId);
            if (!streamData) {
                res.writeHead(404);
                res.end('Stream not found');
                return;
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
            
            if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞
            if (streamInfo.type === 'mjpeg') {
                await this.handleMJPEGStream(req, res, streamUrl, streamData);
            } else if (streamInfo.type === 'mp4') {
                await this.handleMP4Stream(req, res, streamUrl, streamData);
            } else {
                // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–∫—Å–∏
                await this.handleGenericStream(req, res, streamUrl, streamData);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å–∞:`, error);
            res.writeHead(500);
            res.end('Internal server error');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ MJPEG –ø–æ—Ç–æ–∫–∞
     */
    async handleMJPEGStream(req, res, streamUrl, streamData) {
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è MJPEG –ø–æ—Ç–æ–∫–∞ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ
            res.writeHead(200, {
                'Content-Type': 'multipart/x-mixed-replace; boundary=--myboundary',
                'Cache-Control': 'no-cache',
                'Connection': 'close'
            });

            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π RTSP –ø–æ—Ç–æ–∫, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å
            if (streamUrl.startsWith('rtsp://')) {
                await this.proxyRealRTSPStream(res, streamUrl, streamData);
            } else {
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ MJPEG –ø–æ—Ç–æ–∫–∞
                await this.generateDemoMJPEGStream(res, streamData);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ MJPEG –ø–æ—Ç–æ–∫–∞:`, error);
            res.end();
        }
    }

    /**
     * –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ RTSP –ø–æ—Ç–æ–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    async proxyRealRTSPStream(res, streamUrl, streamData) {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RTSP –ø–æ—Ç–æ–∫—É
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø–æ–ª–Ω–∞—è RTSP –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HTTP –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            const httpUrl = streamUrl.replace('rtsp://', 'http://').replace(':554/', ':80/');
            
            const { request } = streamUrl.startsWith('https://') ? https : http;
            
            const proxyReq = request(httpUrl, (proxyRes) => {
                proxyRes.on('data', (chunk) => {
                    streamData.bytesTransferred += chunk.length;
                    res.write(chunk);
                });

                proxyRes.on('end', () => {
                    res.end();
                });

                proxyRes.on('error', (error) => {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞:`, error.message);
                    this.generateDemoMJPEGStream(res, streamData);
                });
            });

            proxyReq.on('error', (error) => {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RTSP –ø–æ—Ç–æ–∫—É, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º`);
                this.generateDemoMJPEGStream(res, streamData);
            });

            proxyReq.end();

        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è RTSP, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º:`, error.message);
            await this.generateDemoMJPEGStream(res, streamData);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ MJPEG –ø–æ—Ç–æ–∫–∞
     */
    async generateDemoMJPEGStream(res, streamData) {
        const camera = streamData.camera;
        const quality = streamData.quality;
        
        console.log(`üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ MJPEG –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${camera.camera_name}`);
        
        const fps = quality === 'high' ? 25 : 15;
        const frameInterval = 1000 / fps;
        
        let frameCount = 0;
        const maxFrames = 3600 * fps; // 1 —á–∞—Å –º–∞–∫—Å–∏–º—É–º
        
        const streamInterval = setInterval(() => {
            if (res.destroyed || frameCount >= maxFrames) {
                clearInterval(streamInterval);
                return;
            }

            try {
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ JPEG –∫–∞–¥—Ä–∞ (—Ü–≤–µ—Ç–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º)
                const frame = this.generateDemoFrame(camera, quality, frameCount);
                
                res.write('--myboundary\r\n');
                res.write('Content-Type: image/jpeg\r\n');
                res.write(`Content-Length: ${frame.length}\r\n\r\n`);
                res.write(frame);
                res.write('\r\n');
                
                frameCount++;
                streamData.bytesTransferred += frame.length + 100; // +–∑–∞–≥–æ–ª–æ–≤–∫–∏
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–¥—Ä–∞:`, error);
                clearInterval(streamInterval);
                res.end();
            }
            
        }, frameInterval);

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        res.on('close', () => {
            clearInterval(streamInterval);
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π JPEG)
     */
    generateDemoFrame(camera, quality, frameCount) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ "JPEG" –∫–∞–¥—Ä–∞ –≤ –≤–∏–¥–µ SVG, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ base64
        const width = quality === 'high' ? 1920 : 640;
        const height = quality === 'high' ? 1080 : 480;
        
        const hue = (camera.id * 30 + frameCount) % 360;
        const timestamp = new Date().toLocaleTimeString();
        
        const svg = `
            <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <linearGradient id="grad${camera.id}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:hsl(${hue}, 70%, 50%);stop-opacity:1" />
                        <stop offset="100%" style="stop-color:hsl(${hue + 60}, 70%, 30%);stop-opacity:1" />
                    </linearGradient>
                </defs>
                <rect width="100%" height="100%" fill="url(#grad${camera.id})" />
                <circle cx="${width/2}" cy="${height/2}" r="${Math.min(width, height)/6}" fill="rgba(255,255,255,0.2)" />
                <text x="${width/2}" y="${height/2 - 40}" text-anchor="middle" fill="white" font-family="Arial" font-size="${Math.max(16, width/40)}" font-weight="bold">
                    üìπ ${camera.camera_name}
                </text>
                <text x="${width/2}" y="${height/2}" text-anchor="middle" fill="white" font-family="Arial" font-size="${Math.max(12, width/60)}">
                    ${quality === 'high' ? '1920√ó1080' : '640√ó480'} ‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
                </text>
                <text x="${width/2}" y="${height/2 + 30}" text-anchor="middle" fill="white" font-family="Arial" font-size="${Math.max(12, width/60)}">
                    ${timestamp} ‚Ä¢ –ö–∞–¥—Ä #${frameCount}
                </text>
                <text x="20" y="30" fill="rgba(255,255,255,0.8)" font-family="Arial" font-size="${Math.max(10, width/80)}">
                    ID: ${camera.id} | –ö–ª–∏–µ–Ω—Ç–æ–≤: ${this.activeStreams.get(`${camera.id}_${quality}`)?.clientsConnected || 0}
                </text>
            </svg>
        `;
        
        // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ "JPEG" —á–µ—Ä–µ–∑ base64
        const svgBase64 = Buffer.from(svg).toString('base64');
        const fakeJpeg = Buffer.from(svgBase64, 'base64');
        
        return fakeJpeg;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ MP4 –ø–æ—Ç–æ–∫–∞
     */
    async handleMP4Stream(req, res, streamUrl, streamData) {
        try {
            res.writeHead(200, {
                'Content-Type': 'video/mp4',
                'Cache-Control': 'no-cache',
                'Connection': 'close'
            });

            // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ MP4 –ø–æ—Ç–æ–∫–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ
            if (streamUrl.startsWith('http://') || streamUrl.startsWith('https://')) {
                await this.proxyHTTPStream(res, streamUrl, streamData);
            } else {
                res.writeHead(501);
                res.end('MP4 over RTSP not implemented in autonomous mode');
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ MP4 –ø–æ—Ç–æ–∫–∞:`, error);
            res.writeHead(500);
            res.end('MP4 stream error');
        }
    }

    /**
     * –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –ø–æ—Ç–æ–∫–∞
     */
    async proxyHTTPStream(res, streamUrl, streamData) {
        try {
            const { request } = streamUrl.startsWith('https://') ? https : http;
            
            const proxyReq = request(streamUrl, (proxyRes) => {
                // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                Object.keys(proxyRes.headers).forEach(key => {
                    res.setHeader(key, proxyRes.headers[key]);
                });
                
                res.writeHead(proxyRes.statusCode);
                
                proxyRes.on('data', (chunk) => {
                    streamData.bytesTransferred += chunk.length;
                    res.write(chunk);
                });

                proxyRes.on('end', () => {
                    res.end();
                });
            });

            proxyReq.on('error', (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è:`, error);
                res.writeHead(500);
                res.end('Proxy error');
            });

            proxyReq.end();

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP –ø–æ—Ç–æ–∫–∞:`, error);
            res.writeHead(500);
            res.end('HTTP stream error');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
     */
    async handleGenericStream(req, res, streamUrl, streamData) {
        // Fallback - –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
            if (streamUrl.startsWith('http://') || streamUrl.startsWith('https://')) {
                await this.proxyHTTPStream(res, streamUrl, streamData);
            } else {
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                res.writeHead(200, {
                    'Content-Type': 'text/plain',
                    'Cache-Control': 'no-cache'
                });
                res.end(`–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º: ${streamData.camera.camera_name}\n–§–æ—Ä–º–∞—Ç –ø–æ—Ç–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: ${streamUrl}`);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:`, error);
            res.writeHead(500);
            res.end('Generic stream error');
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    async toggleAudio(cameraId, quality = 'low') {
        const streamId = `${cameraId}_${quality}`;
        const streamData = this.activeStreams.get(streamId);
        
        if (!streamData) {
            throw new Error(`–ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${streamId}`);
        }

        // –ï—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–µ—Ä—ã - –≤—ã–∫–ª—é—á–∞–µ–º
        if (this.currentAudioStream === streamId) {
            await this.stopAudioStream(streamId);
            console.log(`üîá –ê—É–¥–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ: ${streamData.camera.camera_name}`);
            this.emit('audioStopped', { streamId, camera: streamData.camera });
            return false;
        }

        // –í–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã
        try {
            await this.startAudioStream(streamData);
            console.log(`üîä –ê—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ: ${streamData.camera.camera_name}`);
            this.emit('audioStarted', { streamId, camera: streamData.camera });
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ:`, error);
            this.emit('audioError', { streamId, camera: streamData.camera, error });
            return false;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    async startAudioStream(streamData) {
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ (—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å)
        if (this.currentAudioStream && this.currentAudioStream !== streamData.id) {
            await this.stopAudioStream(this.currentAudioStream);
        }

        // –í –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∞—É–¥–∏–æ URL
        const audioUrl = `/audio_demo/${streamData.id}`;
        this.currentAudioStream = streamData.id;
        this.audioStreams.set(streamData.id, { url: audioUrl, active: true });
        
        console.log(`üîä –î–µ–º–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω: ${audioUrl}`);
        
        return audioUrl;
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
     */
    async stopAudioStream(streamId) {
        this.audioStreams.delete(streamId);
        
        if (this.currentAudioStream === streamId) {
            this.currentAudioStream = null;
        }
        
        console.log(`üîá –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${streamId}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
     */
    getStreamUrl(cameraId, quality = 'low') {
        const streamId = `${cameraId}_${quality}`;
        const streamData = this.activeStreams.get(streamId);
        
        if (!streamData) {
            return null;
        }
        
        return `http://localhost:${streamData.proxyPort}/`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    getStreamStatus() {
        const streams = {};
        
        for (const [streamId, streamData] of this.activeStreams) {
            streams[streamId] = {
                camera: streamData.camera,
                quality: streamData.quality,
                status: streamData.status,
                uptime: Date.now() - streamData.startTime,
                bytesTransferred: streamData.bytesTransferred,
                clientsConnected: streamData.clientsConnected,
                proxyPort: streamData.proxyPort,
                hasAudio: !!this.audioStreams.has(streamId),
                isCurrentAudio: this.currentAudioStream === streamId,
                streamUrl: `http://localhost:${streamData.proxyPort}/`
            };
        }

        return {
            totalStreams: this.activeStreams.size,
            audioStreams: this.audioStreams.size,
            currentAudioStream: this.currentAudioStream,
            maxConnections: this.config.maxConnections,
            autonomous: true,
            platform: process.platform,
            streams: streams
        };
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
     */
    async stopStream(streamId) {
        const streamData = this.activeStreams.get(streamId);
        
        if (streamData) {
            console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: ${streamData.camera.camera_name}`);
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
            if (streamData.proxyServer) {
                streamData.proxyServer.close();
            }

            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
            if (this.audioStreams.has(streamId)) {
                await this.stopAudioStream(streamId);
            }

            this.activeStreams.delete(streamId);
            this.connectionAttempts.delete(streamId);
            
            // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (this.reconnectTimers.has(streamId)) {
                clearTimeout(this.reconnectTimers.get(streamId));
                this.reconnectTimers.delete(streamId);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Ç–æ–∫–∞
     */
    handleStreamError(streamId, camera, error) {
        const attempts = (this.connectionAttempts.get(streamId) || 0) + 1;
        this.connectionAttempts.set(streamId, attempts);

        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}: ${error.message} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${this.config.maxRetries})`);
        this.emit('streamError', { streamId, camera, error, attempts });

        if (attempts >= this.config.maxRetries) {
            console.error(`üíÄ –ü–æ—Ç–æ–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${camera.camera_name}`);
            this.emit('streamFailed', { streamId, camera });
            this.stopStream(streamId);
        } else {
            // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const timer = setTimeout(() => {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attempts + 1}: ${camera.camera_name}`);
                this.startStream(camera, streamData?.quality || 'low');
            }, this.config.retryInterval);
            
            this.reconnectTimers.set(streamId, timer);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    async stopAllStreams() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...');
        const stopPromises = Array.from(this.activeStreams.keys()).map(streamId => 
            this.stopStream(streamId)
        );
        
        await Promise.all(stopPromises);
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤
        this.nextProxyPort = this.config.proxyPort;
        
        console.log('‚úÖ –í—Å–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
}

export default AutonomousRTSPManager;
