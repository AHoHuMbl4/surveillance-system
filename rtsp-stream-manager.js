/**
 * RTSP Stream Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞–º–∏ —á–µ—Ä–µ–∑ FFmpeg
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã mock –≤–∏–¥–µ–æ –≤ —Å–∏—Å—Ç–µ–º–µ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è
 */

const { spawn } = require('child_process');
const EventEmitter = require('events');
const path = require('path');
const fs = require('fs');

class RTSPStreamManager extends EventEmitter {
    constructor() {
        super();
        this.activeStreams = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å—ã
        this.streamBuffer = new Map(); // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        this.connectionAttempts = new Map(); // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectTimers = new Map(); // –¢–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            maxRetries: 5,
            retryInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            connectionTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
            bufferSize: 1024 * 1024, // 1MB –±—É—Ñ–µ—Ä
            outputDir: './stream_output',
            ffmpegPath: 'ffmpeg' // –ü—É—Ç—å –∫ FFmpeg
        };
        
        this.ensureOutputDirectory();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    ensureOutputDirectory() {
        if (!fs.existsSync(this.config.outputDir)) {
            fs.mkdirSync(this.config.outputDir, { recursive: true });
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ RTSP –ø–æ—Ç–æ–∫–∞ —Å –¥–≤–æ–π–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
     * @param {Object} camera - –û–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @param {string} quality - 'low' (480p) –∏–ª–∏ 'high' (1080p)
     */
    async startStream(camera, quality = 'low') {
        const streamId = `${camera.id}_${quality}`;
        
        try {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.activeStreams.has(streamId)) {
                await this.stopStream(streamId);
            }

            // –í—ã–±–æ—Ä RTSP URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
            const rtspUrl = quality === 'high' ? camera.rtsp_hd_link : camera.rtsp_link;
            
            if (!rtspUrl) {
                throw new Error(`RTSP URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã ${camera.camera_name} (${quality})`);
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FFmpeg –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
            const ffmpegArgs = this.buildFFmpegArgs(rtspUrl, streamId, quality);
            
            console.log(`üé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name} (${quality})`);
            console.log(`üì° RTSP: ${rtspUrl}`);

            // –ó–∞–ø—É—Å–∫ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞
            const ffmpegProcess = spawn(this.config.ffmpegPath, ffmpegArgs);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            this.activeStreams.set(streamId, {
                process: ffmpegProcess,
                camera: camera,
                quality: quality,
                startTime: Date.now(),
                status: 'connecting'
            });

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupFFmpegHandlers(streamId, ffmpegProcess, camera);

            // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const connectionTimer = setTimeout(() => {
                if (this.activeStreams.get(streamId)?.status === 'connecting') {
                    console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${camera.camera_name}`);
                    this.handleStreamError(streamId, new Error('Connection timeout'));
                }
            }, this.config.connectionTimeout);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            this.activeStreams.get(streamId).connectionTimer = connectionTimer;

            return streamId;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}:`, error.message);
            this.emit('streamError', { camera, error: error.message });
            throw error;
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è FFmpeg
     */
    buildFFmpegArgs(rtspUrl, streamId, quality) {
        const outputPath = path.join(this.config.outputDir, `${streamId}.m3u8`);
        
        const baseArgs = [
            '-y', // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
            '-fflags', '+genpts', // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PTS
            '-thread_queue_size', '512',
            '-analyzeduration', '5000000',
            '-probesize', '5000000',
            '-i', rtspUrl
        ];

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        const qualityArgs = quality === 'high' ? [
            // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (1080p)
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'zerolatency',
            '-s', '1920x1080',
            '-r', '25',
            '-b:v', '4M',
            '-maxrate', '4M',
            '-bufsize', '8M'
        ] : [
            // –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p)
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'zerolatency',
            '-s', '640x480',
            '-r', '15',
            '-b:v', '1M',
            '-maxrate', '1M',
            '-bufsize', '2M'
        ];

        const hlsArgs = [
            // HLS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            '-f', 'hls',
            '-hls_time', '2',
            '-hls_list_size', '3',
            '-hls_flags', 'delete_segments+independent_segments',
            '-hls_segment_filename', path.join(this.config.outputDir, `${streamId}_%03d.ts`),
            outputPath
        ];

        return [...baseArgs, ...qualityArgs, ...hlsArgs];
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π FFmpeg
     */
    setupFFmpegHandlers(streamId, ffmpegProcess, camera) {
        const streamData = this.activeStreams.get(streamId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ stdout
        ffmpegProcess.stdout.on('data', (data) => {
            // FFmpeg –ø–∏—à–µ—Ç –≤ stderr, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ stderr (–æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥ FFmpeg)
        ffmpegProcess.stderr.on('data', (data) => {
            const output = data.toString();
            
            // –ü–æ–∏—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (output.includes('fps=') || output.includes('bitrate=')) {
                if (streamData.status === 'connecting') {
                    console.log(`‚úÖ –ü–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${camera.camera_name}`);
                    streamData.status = 'streaming';
                    
                    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if (streamData.connectionTimer) {
                        clearTimeout(streamData.connectionTimer);
                        delete streamData.connectionTimer;
                    }
                    
                    this.emit('streamConnected', { streamId, camera });
                    this.resetConnectionAttempts(streamId);
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (output.includes('Connection failed') || 
                output.includes('No route to host') ||
                output.includes('Connection refused')) {
                this.handleStreamError(streamId, new Error('Connection failed'));
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        ffmpegProcess.on('close', (code, signal) => {
            console.log(`üîÑ FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${camera.camera_name}, –∫–æ–¥: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal}`);
            
            if (streamData.status === 'streaming' && code !== 0 && !signal) {
                // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                this.handleStreamError(streamId, new Error(`FFmpeg exited with code ${code}`));
            } else {
                // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                this.cleanupStream(streamId);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
        ffmpegProcess.on('error', (error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ ${camera.camera_name}:`, error.message);
            this.handleStreamError(streamId, error);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Ç–æ–∫–∞
     */
    async handleStreamError(streamId, error) {
        const streamData = this.activeStreams.get(streamId);
        if (!streamData) return;

        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ ${streamData.camera.camera_name}:`, error.message);
        
        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
        const attempts = (this.connectionAttempts.get(streamId) || 0) + 1;
        this.connectionAttempts.set(streamId, attempts);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        this.emit('streamError', { 
            streamId, 
            camera: streamData.camera, 
            error: error.message, 
            attempts 
        });

        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        this.cleanupStream(streamId);

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (attempts < this.config.maxRetries) {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attempts}/${this.config.maxRetries} —á–µ—Ä–µ–∑ ${this.config.retryInterval/1000}—Å`);
            
            const reconnectTimer = setTimeout(async () => {
                try {
                    await this.startStream(streamData.camera, streamData.quality);
                } catch (retryError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, retryError.message);
                }
                this.reconnectTimers.delete(streamId);
            }, this.config.retryInterval);

            this.reconnectTimers.set(streamId, reconnectTimer);
        } else {
            console.error(`üíÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è ${streamData.camera.camera_name}`);
            this.emit('streamFailed', { streamId, camera: streamData.camera });
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
     */
    async stopStream(streamId) {
        const streamData = this.activeStreams.get(streamId);
        if (!streamData) return;

        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ ${streamData.camera.camera_name}`);

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ FFmpeg
        if (streamData.process && !streamData.process.killed) {
            streamData.process.kill('SIGTERM');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (!streamData.process.killed) {
                    streamData.process.kill('SIGKILL');
                }
            }, 5000);
        }

        this.cleanupStream(streamId);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Ç–æ–∫–∞
     */
    cleanupStream(streamId) {
        const streamData = this.activeStreams.get(streamId);
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
        if (streamData?.connectionTimer) {
            clearTimeout(streamData.connectionTimer);
        }
        
        const reconnectTimer = this.reconnectTimers.get(streamId);
        if (reconnectTimer) {
            clearTimeout(reconnectTimer);
            this.reconnectTimers.delete(streamId);
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        this.activeStreams.delete(streamId);

        // –û—á–∏—Å—Ç–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        this.cleanupStreamFiles(streamId);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ—Ç–æ–∫–∞
     */
    cleanupStreamFiles(streamId) {
        try {
            const outputDir = this.config.outputDir;
            const files = fs.readdirSync(outputDir);
            
            files.forEach(file => {
                if (file.startsWith(streamId)) {
                    const filePath = path.join(outputDir, file);
                    fs.unlinkSync(filePath);
                }
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è ${streamId}:`, error.message);
        }
    }

    /**
     * –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    resetConnectionAttempts(streamId) {
        this.connectionAttempts.delete(streamId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
     */
    getStreamUrl(streamId) {
        return `/stream_output/${streamId}.m3u8`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–∞
     */
    getStreamStatus(streamId) {
        const streamData = this.activeStreams.get(streamId);
        if (!streamData) return 'stopped';
        
        return streamData.status;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
     */
    getActiveStreams() {
        const streams = {};
        
        this.activeStreams.forEach((data, streamId) => {
            streams[streamId] = {
                camera: data.camera,
                quality: data.quality,
                status: data.status,
                uptime: Date.now() - data.startTime,
                attempts: this.connectionAttempts.get(streamId) || 0
            };
        });

        return streams;
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    async stopAllStreams() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö RTSP –ø–æ—Ç–æ–∫–æ–≤...');
        
        const stopPromises = Array.from(this.activeStreams.keys()).map(streamId => 
            this.stopStream(streamId)
        );

        await Promise.all(stopPromises);
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        this.reconnectTimers.forEach(timer => clearTimeout(timer));
        this.reconnectTimers.clear();
        this.connectionAttempts.clear();
        
        console.log('‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg
     */
    static async checkFFmpegAvailability() {
        return new Promise((resolve) => {
            const ffmpeg = spawn('ffmpeg', ['-version']);
            
            ffmpeg.on('close', (code) => {
                resolve(code === 0);
            });
            
            ffmpeg.on('error', () => {
                resolve(false);
            });
        });
    }
}

module.exports = RTSPStreamManager;
