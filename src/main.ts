// main.ts - Frontend –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

import { invoke } from '@tauri-apps/api/tauri';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface LoginRequest {
    login: string;
    password: string;
}

interface LoginResponse {
    success: boolean;
    user?: User;
    message: string;
}

interface User {
    login: string;
    role: 'Admin' | 'Operator';
}

interface SystemStatus {
    is_authenticated: boolean;
    current_user?: string;
    user_role?: string;
    config_loaded: boolean;
    apartments_count: number;
    cameras_count: number;
}

interface Camera {
    id: number;
    camera_name: string;
    apartment_name: string;
    rtsp_link: string;
    enabled: boolean;
}

interface Apartment {
    id: number;
    apartment_name: string;
    apartment_number: string;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser: User | null = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const loginCard = document.getElementById('loginCard') as HTMLElement;
const mainScreen = document.getElementById('mainScreen') as HTMLElement;
const loginForm = document.getElementById('loginForm') as HTMLFormElement;
const errorMessage = document.getElementById('errorMessage') as HTMLElement;
const successMessage = document.getElementById('successMessage') as HTMLElement;
const loginBtn = document.getElementById('loginBtn') as HTMLButtonElement;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await checkCurrentAuth();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkCurrentAuth() {
    try {
        const isAuth = await invoke<boolean>('check_authentication');
        if (isAuth) {
            const user = await invoke<User>('get_current_user_info');
            if (user) {
                currentUser = user;
                showMainScreen();
                await loadSystemStatus();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    loginForm.addEventListener('submit', handleLogin);
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
    }
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tauri –∫–æ–º–∞–Ω–¥
    window.greet = async (name: string) => {
        try {
            const result = await invoke<string>('greet', { name });
            console.log('–¢–µ—Å—Ç greet:', result);
            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ greet:', error);
        }
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
async function handleLogin(event: Event) {
    event.preventDefault();
    
    const formData = new FormData(loginForm);
    const loginRequest: LoginRequest = {
        login: formData.get('username') as string,
        password: formData.get('password') as string,
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    setLoading(true);
    hideMessages();
    
    try {
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', loginRequest.login);
        
        const response = await invoke<LoginResponse>('login', { request: loginRequest });
        
        if (response.success && response.user) {
            currentUser = response.user;
            showSuccess('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            setTimeout(() => {
                showMainScreen();
                loadSystemStatus();
            }, 1000);
        } else {
            showError(response.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
        setLoading(false);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function handleLogout() {
    try {
        await invoke('logout');
        currentUser = null;
        showLoginScreen();
        console.log('–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
function showLoginScreen() {
    loginCard.classList.remove('hidden');
    mainScreen.classList.remove('active');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    loginForm.reset();
    hideMessages();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
function showMainScreen() {
    loginCard.classList.add('hidden');
    mainScreen.classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    updateUserInfo();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function updateUserInfo() {
    if (!currentUser) return;
    
    const userAvatar = document.getElementById('userAvatar');
    const userName = document.getElementById('userName');
    const userRole = document.getElementById('userRole');
    
    if (userAvatar) {
        userAvatar.textContent = currentUser.login.charAt(0).toUpperCase();
    }
    
    if (userName) {
        userName.textContent = currentUser.login;
    }
    
    if (userRole) {
        const roleText = currentUser.role === 'Admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–û–ø–µ—Ä–∞—Ç–æ—Ä';
        userRole.textContent = roleText;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
async function loadSystemStatus() {
    try {
        const status = await invoke<SystemStatus>('get_system_status');
        updateStatusDisplay(status);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatusDisplay(status: SystemStatus) {
    const apartmentsCount = document.getElementById('apartmentsCount');
    const camerasCount = document.getElementById('camerasCount');
    const connectionStatus = document.getElementById('connectionStatus');
    
    if (apartmentsCount) {
        apartmentsCount.textContent = status.apartments_count.toString();
    }
    
    if (camerasCount) {
        camerasCount.textContent = status.cameras_count.toString();
    }
    
    if (connectionStatus) {
        connectionStatus.textContent = status.config_loaded ? '‚úÖ' : '‚ùå';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã
async function loadSystemData() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        const config = await invoke('load_config');
        console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', config);
        
        const apartments = await invoke<Apartment[]>('get_apartments');
        console.log('–ö–≤–∞—Ä—Ç–∏—Ä—ã:', apartments);
        
        const cameras = await invoke<Camera[]>('get_cameras');
        console.log('–ö–∞–º–µ—Ä—ã:', cameras);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await loadSystemStatus();
        
        alert('–î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI
function setLoading(loading: boolean) {
    if (loading) {
        loginBtn.disabled = true;
        loginBtn.innerHTML = '<span class="loading"></span>–í—Ö–æ–¥...';
    } else {
        loginBtn.disabled = false;
        loginBtn.textContent = '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É';
    }
}

function showError(message: string) {
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
    successMessage.style.display = 'none';
}

function showSuccess(message: string) {
    successMessage.textContent = message;
    successMessage.style.display = 'block';
    errorMessage.style.display = 'none';
}

function hideMessages() {
    errorMessage.style.display = 'none';
    successMessage.style.display = 'none';
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
declare global {
    interface Window {
        greet: (name: string) => Promise<string | undefined>;
        loadSystemData: () => Promise<void>;
    }
}

window.loadSystemData = loadSystemData;

console.log('‚úÖ Frontend –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
