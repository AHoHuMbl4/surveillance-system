/**
 * Autonomous Surveillance Server - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è
 * –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô
 */

import http from 'http';
import fs from 'fs';
import path from 'path';
import url from 'url';
import crypto from 'crypto';
import AutonomousRTSPManager from './autonomous-rtsp-manager.js';

class AutonomousSurveillanceServer {
    constructor() {
        this.streamManager = new AutonomousRTSPManager();
        this.sessions = new Map();
        this.currentConfig = null;
        this.currentApartmentIndex = 0;
        this.cycleTimer = null;
        this.cycleInterval = 15000;
        this.isRTSPEnabled = false;
        this.isAudioEnabled = false;
        this.activeAudioCamera = null;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        this.systemInfo = {
            platform: process.platform,
            nodeVersion: process.version,
            autonomous: true,
            externalDependencies: [],
            supportedFormats: ['mjpeg', 'http-stream', 'demo'],
            maxCameras: 250,
            version: '2.0.0-autonomous'
        };
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.loadConfig();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π stream manager
        this.setupStreamManagerEvents();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        this.server = http.createServer((req, res) => this.handleRequest(req, res));
        
        console.log('üöÄ Autonomous Surveillance Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log(`üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${this.systemInfo.platform}`);
        console.log(`‚ö° Node.js: ${this.systemInfo.nodeVersion}`);
        console.log(`üéØ –†–µ–∂–∏–º: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π stream manager
     */
    setupStreamManagerEvents() {
        this.streamManager.on('streamConnected', ({ streamId, camera, type }) => {
            console.log(`‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π ${type || '–≤–∏–¥–µ–æ'} –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${camera.camera_name} (${streamId})`);
        });

        this.streamManager.on('streamError', ({ streamId, camera, error, attempts }) => {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}: ${error.message} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts})`);
        });

        this.streamManager.on('streamFailed', ({ streamId, camera }) => {
            console.log(`üíÄ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${camera.camera_name} (${streamId})`);
        });

        this.streamManager.on('audioStarted', ({ streamId, camera }) => {
            this.activeAudioCamera = camera.id;
            console.log(`üîä –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –∞—É–¥–∏–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${camera.camera_name}`);
        });

        this.streamManager.on('audioStopped', ({ streamId, camera }) => {
            if (this.activeAudioCamera === camera.id) {
                this.activeAudioCamera = null;
            }
            console.log(`üîá –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –∞—É–¥–∏–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${camera.camera_name}`);
        });

        this.streamManager.on('audioError', ({ streamId, camera, error }) => {
            console.error(`üí• –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}:`, error.message);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    loadConfig() {
        try {
            const configPath = './config.json';
            if (fs.existsSync(configPath)) {
                const configData = fs.readFileSync(configPath, 'utf8');
                this.currentConfig = JSON.parse(configData);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                this.validateAutonomousConfig();
                
                console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${this.currentConfig.apartments.length} –∫–≤–∞—Ä—Ç–∏—Ä, ${this.currentConfig.cameras.length} –∫–∞–º–µ—Ä`);
            } else {
                console.log('‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
                this.createAutonomousDemoConfig();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.createAutonomousDemoConfig();
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    validateAutonomousConfig() {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (!this.currentConfig.autonomous_settings) {
            this.currentConfig.autonomous_settings = {
                demo_mode: true,
                generate_demo_streams: true,
                supported_formats: ['mjpeg', 'http-stream'],
                max_demo_fps: 30,
                demo_quality_low: '640x480',
                demo_quality_high: '1920x1080',
                enable_audio_simulation: true
            };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        this.currentConfig.users.forEach(user => {
            // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if (user.login === 'admin') {
                user.password_hash = this.hashPassword('admin123');
            } else if (user.login === 'operator') {
                user.password_hash = this.hashPassword('operator123');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        this.currentConfig.cameras.forEach(camera => {
            if (!camera.autonomous_mode) {
                camera.autonomous_mode = {
                    demo_enabled: true,
                    stream_type: 'mjpeg',
                    fallback_to_demo: true
                };
            }
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        if (!this.currentConfig.audio_settings) {
            this.currentConfig.audio_settings = {
                autonomous_mode: true,
                demo_audio: true,
                exclusive_mode: true,
                supported_codecs: ['demo', 'wav', 'mp3'],
                default_volume: 0.7
            };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    createAutonomousDemoConfig() {
        this.currentConfig = {
            system: {
                version: this.systemInfo.version,
                autonomous: true,
                platform: this.systemInfo.platform,
                external_dependencies: []
            },
            users: [
                {
                    login: "admin",
                    password_hash: this.hashPassword("admin123"),
                    role: "admin"
                },
                {
                    login: "operator",
                    password_hash: this.hashPassword("operator123"),
                    role: "operator"
                }
            ],
            apartments: [
                {
                    id: 1,
                    apartment_name: "–î–µ–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞ 1"
                },
                {
                    id: 2,
                    apartment_name: "–î–µ–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞ 2"
                }
            ],
            cameras: [
                {
                    id: 1,
                    camera_name: "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∫–∞–º–µ—Ä–∞ 1",
                    rtsp_link: "demo://autonomous/camera1",
                    rtsp_link_high: "demo://autonomous/camera1/hd",
                    apartment_id: 1,
                    position_x: 0,
                    position_y: 0,
                    audio_enabled: true,
                    autonomous_mode: {
                        demo_enabled: true,
                        stream_type: 'mjpeg',
                        fallback_to_demo: true
                    }
                },
                {
                    id: 2,
                    camera_name: "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∫–∞–º–µ—Ä–∞ 2",
                    rtsp_link: "demo://autonomous/camera2",
                    rtsp_link_high: "demo://autonomous/camera2/hd",
                    apartment_id: 1,
                    position_x: 1,
                    position_y: 0,
                    audio_enabled: true,
                    autonomous_mode: {
                        demo_enabled: true,
                        stream_type: 'mjpeg',
                        fallback_to_demo: true
                    }
                },
                {
                    id: 3,
                    camera_name: "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∫–∞–º–µ—Ä–∞ 3",
                    rtsp_link: "demo://autonomous/camera3",
                    rtsp_link_high: "demo://autonomous/camera3/hd",
                    apartment_id: 2,
                    position_x: 0,
                    position_y: 0,
                    audio_enabled: true,
                    autonomous_mode: {
                        demo_enabled: true,
                        stream_type: 'mjpeg',
                        fallback_to_demo: true
                    }
                }
            ],
            autonomous_settings: {
                demo_mode: true,
                generate_demo_streams: true,
                supported_formats: ['mjpeg', 'http-stream'],
                max_demo_fps: 30,
                demo_quality_low: '640x480',
                demo_quality_high: '1920x1080',
                enable_audio_simulation: true
            },
            audio_settings: {
                autonomous_mode: true,
                demo_audio: true,
                exclusive_mode: true,
                supported_codecs: ['demo', 'wav', 'mp3'],
                default_volume: 0.7
            },
            settings: {
                rotation_interval: 15,
                connection_timeout: 10,
                max_retry_attempts: 5,
                enable_audio_by_default: false,
                autonomous_mode: true
            }
        };

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try {
            fs.writeFileSync('./config.json', JSON.stringify(this.currentConfig, null, 2));
            console.log('‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    hashPassword(password) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ, –Ω–æ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const salt = 'autonomous_surveillance_salt_2024';
        return crypto.createHash('sha256').update(password + salt).digest('hex');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
     */
    verifyPassword(password, hash) {
        const computedHash = this.hashPassword(password);
        console.log(`üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:`);
        console.log(`  –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: "${password}"`);
        console.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à: ${computedHash}`);
        console.log(`  –û–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à: ${hash}`);
        console.log(`  –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${computedHash === hash}`);
        return computedHash === hash;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async handleRequest(req, res) {
        const parsedUrl = url.parse(req.url, true);
        const pathname = parsedUrl.pathname;
        const method = req.method;

        // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

        if (method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
        }

        try {
            // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
            if (pathname === '/') {
                await this.serveStaticFile(res, './index.html', 'text/html');
            } else if (pathname.startsWith('/api/')) {
                await this.handleAPIRequest(req, res, pathname, method);
            } else if (pathname.startsWith('/autonomous_stream/')) {
                await this.handleAutonomousStreamRequest(req, res, pathname);
            } else if (pathname.startsWith('/audio_demo/')) {
                await this.handleAudioDemoRequest(req, res, pathname);
            } else {
                this.send404(res);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            this.sendError(res, 500, '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    async handleAutonomousStreamRequest(req, res, pathname) {
        try {
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ—Ç–æ–∫–∞ –∏–∑ URL
            const streamId = pathname.replace('/autonomous_stream/', '');
            const streamUrl = this.streamManager.getStreamUrl(streamId.split('_')[0], streamId.split('_')[1]);
            
            if (!streamUrl) {
                this.send404(res);
                return;
            }

            // –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ—Ç–æ–∫
            const proxyUrl = streamUrl.replace('http://localhost:', 'http://127.0.0.1:');
            
            // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
            const proxyReq = http.request(proxyUrl, (proxyRes) => {
                res.writeHead(proxyRes.statusCode, proxyRes.headers);
                proxyRes.pipe(res);
            });

            proxyReq.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:', error);
                this.send404(res);
            });

            proxyReq.end();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:', error);
            this.send404(res);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ –∞—É–¥–∏–æ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async handleAudioDemoRequest(req, res, pathname) {
        try {
            const streamId = pathname.replace('/audio_demo/', '');
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–º–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
            res.writeHead(200, {
                'Content-Type': 'audio/mpeg',
                'Cache-Control': 'no-cache',
                'Access-Control-Allow-Origin': '*'
            });

            // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è "—Ç–∏—à–∏–Ω—ã" –∫–∞–∫ –¥–µ–º–æ –∞—É–¥–∏–æ
            const silenceBuffer = Buffer.alloc(1024, 0);
            
            let audioFrames = 0;
            const maxFrames = 100; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–º–æ –∞—É–¥–∏–æ
            
            const audioInterval = setInterval(() => {
                if (res.destroyed || audioFrames >= maxFrames) {
                    clearInterval(audioInterval);
                    return;
                }
                
                res.write(silenceBuffer);
                audioFrames++;
            }, 100); // 10 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

            res.on('close', () => {
                clearInterval(audioInterval);
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –∞—É–¥–∏–æ:', error);
            this.send404(res);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async handleAPIRequest(req, res, pathname, method) {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö POST –∑–∞–ø—Ä–æ—Å–∞
        let body = '';
        if (method === 'POST') {
            body = await this.getRequestBody(req);
        }

        switch (pathname) {
            case '/api/login':
                if (method === 'POST') {
                    await this.handleLogin(res, JSON.parse(body));
                }
                break;
                
            case '/api/apartments':
                if (method === 'GET') {
                    await this.handleGetApartments(res);
                }
                break;
                
            case '/api/cameras':
                if (method === 'GET') {
                    await this.handleGetCameras(res);
                }
                break;
                
            case '/api/rtsp/toggle':
                if (method === 'POST') {
                    await this.handleRTSPToggle(res);
                }
                break;
                
            case '/api/rtsp/status':
                if (method === 'GET') {
                    await this.handleRTSPStatus(res);
                }
                break;

            case '/api/audio/toggle':
                if (method === 'POST') {
                    await this.handleAudioToggle(res, JSON.parse(body));
                }
                break;

            case '/api/audio/status':
                if (method === 'GET') {
                    await this.handleAudioStatus(res);
                }
                break;
                
            case '/api/stream/start':
                if (method === 'POST') {
                    await this.handleStreamStart(res, JSON.parse(body));
                }
                break;
                
            case '/api/stream/stop':
                if (method === 'POST') {
                    await this.handleStreamStop(res, JSON.parse(body));
                }
                break;

            case '/api/system/info':
                if (method === 'GET') {
                    await this.handleSystemInfo(res);
                }
                break;
                
            default:
                this.send404(res);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
     */
    async handleSystemInfo(res) {
        const streamStatus = this.streamManager.getStreamStatus();
        
        const systemInfo = {
            ...this.systemInfo,
            uptime: process.uptime(),
            memoryUsage: process.memoryUsage(),
            cpuArchitecture: process.arch,
            streamStatus: streamStatus,
            configLoaded: !!this.currentConfig,
            totalCameras: this.currentConfig?.cameras.length || 0,
            totalApartments: this.currentConfig?.apartments.length || 0
        };

        this.sendJSON(res, systemInfo);
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    async handleLogin(res, data) {
        try {
            const { login, password } = data;
            
            console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –ª–æ–≥–∏–Ω="${login}", –ø–∞—Ä–æ–ª—å="${password}"`);
            
            if (!login || !password) {
                console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                return this.sendError(res, 400, '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            }

            const user = this.currentConfig.users.find(u => u.login === login);
            if (!user) {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${login}`);
                return this.sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            console.log(`üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.login}, —Ä–æ–ª—å: ${user.role}`);
            console.log(`üîç –•–µ—à –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ: ${user.password_hash}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
            const isValidPassword = this.verifyPassword(password, user.password_hash);
            
            if (!isValidPassword) {
                console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${login}`);
                return this.sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${login}`);

            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            const sessionToken = this.generateSessionToken();
            this.sessions.set(sessionToken, {
                user: user,
                loginTime: Date.now(),
                permissions: this.getUserPermissions(user.role),
                autonomous: true
            });

            console.log(`üé´ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: ${sessionToken}`);

            this.sendJSON(res, {
                success: true,
                token: sessionToken,
                user: {
                    login: user.login,
                    role: user.role
                },
                permissions: this.getUserPermissions(user.role),
                autonomous: true,
                platform: this.systemInfo.platform
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è RTSP –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    async handleRTSPToggle(res) {
        try {
            this.isRTSPEnabled = !this.isRTSPEnabled;
            
            if (!this.isRTSPEnabled) {
                await this.streamManager.stopAllStreams();
                this.activeAudioCamera = null;
            }
            
            this.sendJSON(res, {
                success: true,
                enabled: this.isRTSPEnabled,
                autonomous: true,
                message: this.isRTSPEnabled ? '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π RTSP –≤–∫–ª—é—á–µ–Ω' : '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π RTSP –≤—ã–∫–ª—é—á–µ–Ω'
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ RTSP:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ RTSP –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    async handleRTSPStatus(res) {
        try {
            const systemInfo = await this.streamManager.checkSystemAvailability();
            const streamStatus = this.streamManager.getStreamStatus();
            
            const status = {
                enabled: this.isRTSPEnabled,
                autonomous: true,
                systemAvailable: systemInfo.available,
                platform: systemInfo.platform,
                features: systemInfo.features,
                activeStreams: streamStatus.totalStreams,
                audioStreams: streamStatus.audioStreams,
                currentAudioStream: streamStatus.currentAudioStream,
                streams: streamStatus.streams,
                audioEnabled: this.isAudioEnabled,
                activeAudioCamera: this.activeAudioCamera,
                maxConnections: streamStatus.maxConnections
            };

            this.sendJSON(res, status);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ RTSP:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
     */
    async handleStreamStart(res, data) {
        try {
            const { cameraId, quality = 'low', includeAudio = false } = data;
            
            const camera = this.currentConfig.cameras.find(c => c.id === parseInt(cameraId));
            if (!camera) {
                return this.sendError(res, 404, '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const streamId = await this.streamManager.startStream(camera, quality, includeAudio);
            const streamUrl = this.streamManager.getStreamUrl(cameraId, quality);
            
            this.sendJSON(res, {
                success: true,
                streamId: streamId,
                streamUrl: streamUrl,
                camera: camera.camera_name,
                quality: quality,
                audioIncluded: includeAudio,
                autonomous: true,
                autonomousStreamUrl: `/autonomous_stream/${streamId}`
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    async handleAudioToggle(res, data) {
        try {
            const { cameraId, quality = 'low' } = data;
            
            if (!cameraId) {
                return this.sendError(res, 400, '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞–º–µ—Ä—ã');
            }

            const camera = this.currentConfig.cameras.find(c => c.id === parseInt(cameraId));
            if (!camera) {
                return this.sendError(res, 404, '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const isAudioActive = await this.streamManager.toggleAudio(cameraId, quality);
            
            this.sendJSON(res, {
                success: true,
                audioActive: isAudioActive,
                camera: camera.camera_name,
                autonomous: true,
                demoAudio: true,
                message: isAudioActive ? '–î–µ–º–æ –∞—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ' : '–î–µ–º–æ –∞—É–¥–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ'
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserPermissions(role) {
        const permissions = {
            canViewCameras: true,
            canControlAudio: false,
            canChangeSettings: false,
            canManageUsers: false,
            autonomous: true
        };

        if (role === 'admin') {
            permissions.canControlAudio = true;
            permissions.canChangeSettings = true;
            permissions.canManageUsers = true;
        } else if (role === 'operator') {
            permissions.canControlAudio = true;
        }

        return permissions;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
     */
    generateSessionToken() {
        return crypto.randomBytes(32).toString('hex');
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    async handleGetApartments(res) {
        this.sendJSON(res, this.currentConfig.apartments);
    }

    async handleGetCameras(res) {
        this.sendJSON(res, this.currentConfig.cameras);
    }

    async handleAudioStatus(res) {
        const streamStatus = this.streamManager.getStreamStatus();
        const audioStatus = {
            enabled: this.isAudioEnabled,
            autonomous: true,
            demo: true,
            currentAudioCamera: this.activeAudioCamera,
            exclusiveMode: true,
            activeStreams: streamStatus.audioStreams,
            cameras: this.currentConfig.cameras.map(camera => ({
                id: camera.id,
                name: camera.camera_name,
                audioEnabled: camera.audio_enabled,
                isCurrentlyActive: this.activeAudioCamera === camera.id
            }))
        };

        this.sendJSON(res, audioStatus);
    }

    async handleStreamStop(res, data) {
        try {
            const { streamId } = data;
            await this.streamManager.stopStream(streamId);
            
            this.sendJSON(res, {
                success: true,
                autonomous: true,
                message: '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö POST –∑–∞–ø—Ä–æ—Å–∞
     */
    getRequestBody(req) {
        return new Promise((resolve, reject) => {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                resolve(body);
            });
            req.on('error', reject);
        });
    }

    /**
     * –ü–æ–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
     */
    async serveStaticFile(res, filePath, contentType) {
        try {
            if (fs.existsSync(filePath)) {
                const fileContent = fs.readFileSync(filePath);
                res.writeHead(200, { 'Content-Type': contentType });
                res.end(fileContent);
            } else {
                this.send404(res);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —Ñ–∞–π–ª–∞:', error);
            this.send404(res);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞
     */
    sendJSON(res, data) {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(data));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏
     */
    sendError(res, statusCode, message) {
        res.writeHead(statusCode, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: message, autonomous: true }));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ 404
     */
    send404(res) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found - Autonomous Mode');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async start(port = 3000) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        const systemInfo = await this.streamManager.checkSystemAvailability();
        
        console.log(`‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞:`);
        console.log(`üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${systemInfo.platform}`);
        console.log(`‚ö° Node.js: ${systemInfo.nodeVersion}`);
        console.log(`üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${Object.keys(systemInfo.features).filter(f => systemInfo.features[f]).join(', ')}`);
        console.log(`üîê –î–µ–º–æ –ø–∞—Ä–æ–ª–∏: admin/admin123, operator/operator123`);

        this.server.listen(port, () => {
            console.log(`üåê –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            console.log(`üîó –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:${port}`);
            console.log(`üë§ –õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: admin123`);
            console.log(`üé• RTSP –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)`);
            console.log(`üîä –ê—É–¥–∏–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –¥–µ–º–æ —Ä–µ–∂–∏–º`);
            console.log(`üíæ –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
            console.log(`üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ!`);
        });
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async stop() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        await this.streamManager.stopAllStreams();
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        this.server.close(() => {
            console.log('‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
    }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const server = new AutonomousSurveillanceServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    await server.stop();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    await server.stop();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
server.start(3000).catch(error => {
    console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
});

export default AutonomousSurveillanceServer;
